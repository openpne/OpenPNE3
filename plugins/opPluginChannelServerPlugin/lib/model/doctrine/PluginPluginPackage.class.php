<?php

/**
* Copyright 2010 Kousuke Ebihara
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
 * PluginPluginPackage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    opPluginChannelServerPlugin
 * @subpackage model
 * @author     Kousuke Ebihara <ebihara@tejimaya.com>
 */
abstract class PluginPluginPackage extends BasePluginPackage implements opAccessControlRecordInterface
{
  public function getImageFilename()
  {
    return (string)$this->getImage();
  }

  public function getFile()
  {
    return $this->getImage();
  }

  public function getLeadMemberIds()
  {
    $results = array();

    $list = Doctrine::getTable('PluginMember')->createQuery()
      ->where('package_id = ?', $this->id)
      ->andWhere('position = ?', 'lead')
      ->fetchArray();

    foreach ($list as $member)
    {
      $results[] = $member['member_id'];
    }

    return $results;
  }

  public function getMembers($limit = null, $isRandom = false)
  {
    $q = Doctrine::getTable('PluginMember')->createQuery()
      ->where('package_id = ?', $this->id);

    if (!is_null($limit))
    {
      $q->limit($limit);
    }

    if ($isRandom)
    {
      $expr = new Doctrine_Expression('RANDOM()');
      $q->orderBy($expr);
    }

    $members = $q->execute();
    if (!$members->count())
    {
      return false;
    }

    $q = Doctrine::getTable('Member')->createQuery()
      ->whereIn('id', array_values($members->toKeyValueArray('id', 'member_id')));

    return $q->execute();
  }

  public function countMembers()
  {
    return Doctrine::getTable('PluginMember')
      ->createQuery()
      ->where('package_id = ?', array($this->id))
      ->count();
  }

  public function countUsers()
  {
    return $this->user_count;
  }

  public function isUser($id)
  {
    return (bool)$this->getUser($id);
  }

  public function getUser($id)
  {
    return Doctrine::getTable('PluginUser')
      ->createQuery()
      ->where('package_id = ?', array($this->id))
      ->andWhere('member_id = ?', array($id))
      ->fetchOne();
  }

  public function isLead($id)
  {
    return in_array($id, $this->getLeadMemberIds());
  }

  public function isDeveloper($id)
  {
    return (bool)Doctrine::getTable('PluginMember')
      ->createQuery()
      ->where('package_id = ?', array($this->id))
      ->andWhere('member_id = ?', array($id))
      ->andWhere('position = ?', array('developer'))
      ->fetchOne();
  }

  public function isContributor($id)
  {
    return (bool)Doctrine::getTable('PluginMember')
      ->createQuery()
      ->where('package_id = ?', array($this->id))
      ->andWhere('member_id = ?', array($id))
      ->andWhere('position = ?', array('developer'))
      ->fetchOne();
  }

  public function toggleUsing($id)
  {
    if ($user = $this->getUser($id))
    {
      $user->delete();
    }
    else
    {
      $this->PluginUser[]->member_id = $id;
      $this->save();
    }

    $count = Doctrine::getTable('PluginUser')
      ->createQuery()
      ->where('package_id = ?', array($this->id))
      ->count();

    $this->user_count = $count;

    $this->save();
  }

  public function getLatestRelease()
  {
    $versions = array();
    $_versions = Doctrine::getTable('PluginRelease')
      ->createQuery()
      ->select('version')
      ->where('package_id = ?', $this->id)
      ->fetchArray();

    foreach ($_versions as $v)
    {
      $versions[] = $v['version'];
    }

    if (!$versions)
    {
      return false;
    }

    usort($versions, 'version_compare');

    return array_shift($versions);
  }

  public function getStableRelease()
  {
    $versions = array();
    $_versions = Doctrine::getTable('PluginRelease')
      ->createQuery()
      ->select('version')
      ->where('package_id = ?', $this->id)
      ->andWhere('stability = ?', 'stable')
      ->fetchArray();

    foreach ($_versions as $v)
    {
      $versions[] = $v['version'];
    }

    if (!$versions)
    {
      return false;
    }

    usort($versions, 'version_compare');

    return array_shift($versions);
  }

  public function getAlphaRelease()
  {
    $versions = array();
    $_versions = Doctrine::getTable('PluginRelease')
      ->createQuery()
      ->select('version')
      ->where('package_id = ?', $this->id)
      ->andWhere('stability = ?', 'alpha')
      ->fetchArray();

    foreach ($_versions as $v)
    {
      $versions[] = $v['version'];
    }

    if (!$versions)
    {
      return false;
    }

    usort($versions, 'version_compare');

    return array_shift($versions);
  }

  public function getBetaRelease()
  {
    $versions = array();
    $_versions = Doctrine::getTable('PluginRelease')
      ->createQuery()
      ->select('version')
      ->where('package_id = ?', $this->id)
      ->andWhere('stability = ?', 'beta')
      ->fetchArray();

    foreach ($_versions as $v)
    {
      $versions[] = $v['version'];
    }

    if (!$versions)
    {
      return false;
    }

    usort($versions, 'version_compare');

    return array_shift($versions);
  }

  public function getDevelRelease()
  {
    $versions = array();
    $_versions = Doctrine::getTable('PluginRelease')
      ->createQuery()
      ->select('version')
      ->where('package_id = ?', $this->id)
      ->andWhere('stability = ?', 'devel')
      ->fetchArray();

    foreach ($_versions as $v)
    {
      $versions[] = $v['version'];
    }

    if (!$versions)
    {
      return false;
    }

    usort($versions, 'version_compare');

    return array_shift($versions);
  }

  public function getReleases($limit = 5)
  {
    return Doctrine::getTable('PluginRelease')->createQuery()
      ->where('package_id = ?', $this->id)
      ->limit($limit)
      ->orderBy('created_at DESC')
      ->execute();
  }

  public function generateRoleId(Member $member)
  {
    if ($this->isLead($member->id))
    {
      return 'lead';
    }
    elseif ($this->isDeveloper($member->id))
    {
      return 'developer';
    }
    elseif ($this->isContributor($member->id))
    {
      return 'contributor';
    }
    elseif ($member->id)
    {
      return 'sns_member';
    }

    return 'anonymous';
  }

  public function getNameAndCount()
  {
    return $this->getName();
  }

  public function toArray($deep = true, $prefixKey = false)
  {
    $result = parent::toArray($deep, $prefixKey);

    $result['is_relating_redmine'] = (int)$this->isRelatingRedmine();

    return $result;
  }

  public function isRelatingRedmine()
  {
    $baseUrl = opPluginChannelServerToolkit::getConfig('related_redmine_base_url', 'http://redmine.openpne.jp/');

    return (0 === strpos($this->bts, $baseUrl));
  }
}
